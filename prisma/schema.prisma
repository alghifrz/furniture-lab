generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  cart          Cart[]
  checkouts     Checkout[]
  chats         Chat[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PendingUser {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  token     String
  expiredAt DateTime
}

model ResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  checkouts Checkout[]
  chats     Chat[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  name        String
  image       String
  description String    @db.Text
  stock       Int
  price       Int
  rating      Float       @default(0)
  reviewCount Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  admin       Admin       @relation(fields: [adminId], references: [id])
  adminId     String
  cart        Cart[]
  checkouts   Checkout[]
  chats       Chat[]
  reviews     Review[]
}

model Address {
  id         String    @id @default(cuid())
  province   String
  city       String
  kecamatan  String
  kodePos    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  checkouts  Checkout[]
}

model Checkout {
  id        String    @id @default(cuid())
  quantity  Int
  state     CheckoutState
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  address   Address   @relation(fields: [addressId], references: [id])
  addressId String
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   String
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   String
  userMessages    UserMessage[]
  adminMessages    AdminMessage[]
}

model UserMessage {
  id        String    @id @default(cuid())
  message   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat      Chat      @relation(fields: [chatId], references: [id])
  chatId    String
}

model AdminMessage {
  id        String    @id @default(cuid())
  message   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat      Chat      @relation(fields: [chatId], references: [id])
  chatId    String
}

model Cart {
  id         String    @id @default(cuid())
  quantity   Int
  checked    Boolean   @default(false)
  dateAdded  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
}

enum CheckoutState {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
} 