generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  checkouts     Checkout[]
  reviews       Review[]
  feedbacks     Feedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PendingUser {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  token     String
  expiredAt DateTime
}

model ResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  checkouts Checkout[]
  featuredFeedbacks Feedback[] @relation("FeaturedFeedbacks")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  rating      Float         @default(0)
  reviewCount Int          @default(0)
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cartItems   CartItem[]
  checkoutItems CheckoutItem[]
  reviews     Review[]
  admin       Admin         @relation(fields: [adminId], references: [id])
  adminId     String
}

model Address {
  id            String    @id @default(cuid())
  fullName      String
  phoneNumber   String
  province      String
  city          String
  kecamatan     String
  kodePos       String
  alamatLengkap String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  checkouts     Checkout[]
}

model Checkout {
  id            String       @id @default(cuid())
  state         CheckoutState
  paymentProof  String?      
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  address       Address      @relation(fields: [addressId], references: [id])
  addressId     String
  admin         Admin        @relation(fields: [adminId], references: [id])
  adminId       String
  items         CheckoutItem[]
  reviews       Review[]
}

model CheckoutItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Float    @default(0)
  checkout   Checkout @relation(fields: [checkoutId], references: [id])
  checkoutId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

enum CheckoutState {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Checkout? @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int
  comment   String   @db.Text
  isFeatured Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  featuredBy Admin?  @relation("FeaturedFeedbacks", fields: [adminId], references: [id])
  adminId   String?
} 